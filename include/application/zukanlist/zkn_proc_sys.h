//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *
 *	@file		zkn_proc_sys.h
 *	@brief		図鑑用処理分岐システム
 *	@author		tomoya takahashi 
 *	@data		2006.01.17
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#ifndef __ZKN_PROC_SYS_H__
#define __ZKN_PROC_SYS_H__

#undef GLOBAL
#ifdef	__ZKN_PROC_SYS_H_GLOBAL
#define	GLOBAL	/* */
#else
#define	GLOBAL	extern
#endif



//-----------------------------------------------------------------------------
/**
 *		管理する処理の流れ
 *			プロセスのデータを受け取ってシステム初期化
 *								|
 *					データ処理の初期化を行う
 *								｜
 *					描画処理の初期化を行う	（フェードイン処理もこの中）
 *								｜
 *					データ処理のメイン処理を行う
 *					描画処理のメイン処理を行う
 *								｜
 *				　　終了しろと管理者から命令が来る
 *								｜
 *					　　描画処理の破棄を行う	（フェードアウト処理もこの中）
 *								｜
 *					　　データ処理の破棄を行う
 *								｜
 *					管理者に全て終わりましたと報告する
 *
 * 
 *		決まり
 *			ZKN_PROC_INIT	でメモリの確保
 *			ZKN_PROC_DELETE	でメモリの破棄
 *			を行う
 *			ZKN_PROC_MAIN	のでメモリ確保破棄処理をいれない。
 *			ZKN_PROC_MAIN	の中では必ずend_seqを見て終了する
 *							タイミングを確認してください。
 *
 *			描画処理とデータ変更処理の分割をきちんとしましょう。
 *			描画処理は
 *				描画位置　何で表示するのかなどを制御
 *			データ変更処理は
 *				ポケモンデータ変更や、分布データ取得など
 *				表示にかかわるデータなどの変更を行います。
 */
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					定数宣言
*/
//-----------------------------------------------------------------------------
//-------------------------------------
//	図鑑プロセスシステムの戻り値構造体
//=====================================
enum{
	ZKN_PROC_FALSE,
	ZKN_PROC_TRUE,
};

//-------------------------------------
//	関数処理分岐定数
//		これでプロセス関数のなかを分岐してください。
//=====================================
enum{
	ZKN_PROC_FUNC_INIT,			// 初期化　フェードインもこの中
	ZKN_PROC_FUNC_MAIN,			// メイン処理
	ZKN_PROC_FUNC_DELETE,		// 破棄	フェードアウトもこのなか
	ZKN_PROC_FUNC_NUM,
};



//-----------------------------------------------------------------------------
/**
 *
 *					構造体宣言
 *					
*/
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
/**
 *		データ処理用のプロセス
 */
//-----------------------------------------------------------------------------
//-------------------------------------
//	データ処理データ構造体
//=====================================
typedef struct {
	int seq;				// 初期化時は初期値0で渡されます。
	int heap;				// ヒープ
	void* p_work;			// 各自メモリ確保　破棄してください。
	BOOL end_req;			// 管理者からの終了リクエスト伝達フラグ
	BOOL lock;				// 管理者からの動作lock伝達フラグ
} ZKN_PROC_DO_DATA;

//-------------------------------------
//	データ処理用関数ポインタ
//=====================================
//----------------------------------------------------------------------------
/**
 *	@param	p_dodata	ZKN_PROC_DO_DATA
 *	@param	p_glbdata	管理者から受け取るデータ　（保存しておきたいデータ）
 *
 *	@retval	ZKN_PROC_TRUE		次の処理へ進みます。
 *	@retval	ZKN_PROC_FALSE		まだ進みません。
 */
//-----------------------------------------------------------------------------
typedef int (*ZKN_PROC_DO_FUNC)( ZKN_PROC_DO_DATA* p_dodata, void* p_glbdata );

//-----------------------------------------------------------------------------
/**
 *		描画用のプロセス
 */
//-----------------------------------------------------------------------------
//-------------------------------------
//	描画データ構造体
//=====================================
typedef struct {
	int seq;		// 初期化時は初期値0で渡されます。
	int heap;		// ヒープ
	void* p_work;   // 各自メモリ確保　破棄してください。
} ZKN_PROC_DRAW_DATA;

//-------------------------------------
//	描画用関数ポインタ
//=====================================
//----------------------------------------------------------------------------
/**
 *	@param	p_drawglb	描画用グローバルデータ
 *	@param	p_drawdata	ZKN_PROC_DRAW_DATA
 *	@param	cp_glbdata	管理者から受け取るデータ　（保存しておきたいデータ）
 *	@param	cp_dodata	今の処理の内部ワークデータ
 *
 *	@retval	ZKN_PROC_TRUE		次の処理へ進みます。
 *	@retval	ZKN_PROC_FALSE		まだ進みません。
 */
//-----------------------------------------------------------------------------
typedef int (*ZKN_PROC_DRAW_FUNC)( void* p_drawglb, ZKN_PROC_DRAW_DATA* p_drawdata, const void* cp_glbdata, const ZKN_PROC_DO_DATA* cp_dodata );

//-----------------------------------------------------------------------------
/**
 *		プロセスシステム
 */
//-----------------------------------------------------------------------------
typedef struct _ZKN_PROC_SYS*			ZKN_PROC_SYS_PTR;
typedef const struct _ZKN_PROC_SYS*		CONST_ZKN_PROC_SYS_PTR;


//-----------------------------------------------------------------------------
/**
 *		初期化処理用構造体
 */
//-----------------------------------------------------------------------------
typedef struct {
	void* p_glb_data;					// グローバルデータ
	void* p_glb_draw;					// 描画グローバルデータ
	const ZKN_PROC_DO_FUNC*		cp_do_func;		// 各処理関数
	const ZKN_PROC_DRAW_FUNC*	cp_draw_func;	// 各処理関数
} ZKN_PROC_INIT;



//-----------------------------------------------------------------------------
/**
 *					プロトタイプ宣言
*/
//-----------------------------------------------------------------------------
GLOBAL ZKN_PROC_SYS_PTR ZKN_PROC_MemoryAlloc( int heap );
GLOBAL void ZKN_PROC_Init( ZKN_PROC_SYS_PTR proc, const ZKN_PROC_INIT* cp_init );
GLOBAL int ZKN_PROC_Main( ZKN_PROC_SYS_PTR proc );
GLOBAL int ZKN_PROC_Draw( ZKN_PROC_SYS_PTR proc );

GLOBAL void ZKN_PROC_MoveLock( ZKN_PROC_SYS_PTR proc, BOOL lock );

GLOBAL void ZKN_PROC_EndReq( ZKN_PROC_SYS_PTR proc );

GLOBAL BOOL ZKN_PROC_EndCheck( ZKN_PROC_SYS_PTR proc );
GLOBAL BOOL ZKN_PROC_MainMoveCheck( ZKN_PROC_SYS_PTR proc );

#undef	GLOBAL
#endif		// __ZKN_PROC_SYS_H__

