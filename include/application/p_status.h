//============================================================================================
/**
 * @file	p_status.h
 * @brief	ポケモンステータス画面
 * @author	Hiroyuki Nakamura
 * @date	2005.10.26
 */
//============================================================================================
#ifndef P_STATUS_H
#define P_STATUS_H

#include "savedata/config.h"

#undef GLOBAL
#ifdef P_STATUS_H_GLOBAL
#define GLOBAL	/*	*/
#else
#define GLOBAL	extern
#endif


//============================================================================================
//	定数定義
//============================================================================================
typedef struct {
	void * ppd;		// ポケモンデータ
	CONFIG * cfg;	// コンフィグデータ

	const STRCODE * player_name;	// 見ている人の名前
	u32	player_id;					// 見ている人のID
	u8	player_sex;					// 見ている人の性別

	u8	ppt;		// パラメータタイプ
	u8	mode;		// モード
	u8	max;		// 最大数
	u8	pos;		// 何番目のデータか

	u8	page_flg;	// ページフラグ
	u8	ret_sel;	// 選択された技位置
	u8	ret_mode;
	u16	waza;

	u32	zukan_mode;	// 図鑑ナンバー表示モード

	void * ribbon;	// 配布リボンデータ

	void * poruto;	// 与えるポルトのデータ ( _PURUTO_DATA )

	PERAPVOICE * perap;	// ぺラップの鳴き声データ

	BOOL	ev_contest;	// コンテスト関連ON/OFF

}PSTATUS_DATA;

// モード
enum {
	PST_MODE_NORMAL = 0,	// 通常
	PST_MODE_NO_WAZACHG,	// 技入れ替え不可
	PST_MODE_WAZAADD,		// 技覚え/技忘れ
	PST_MODE_PORUTO,		// ポルト使用
	PST_MODE_CONDITION,		// コンディション変更デモ
};

// パラメータタイプ
enum {
	PST_PP_TYPE_POKEPARAM = 0,		// POKEMON_PARAM
	PST_PP_TYPE_POKEPARTY,			// POKEPARTY
	PST_PP_TYPE_POKEPASO,			// POKEMON_PASO_PARAM
};

// 戻り
enum {
	PST_RET_DECIDE = 0,
	PST_RET_CANCEL,
};


// ページID
enum {
	PST_PAGE_INFO = 0,		// 「ポケモンじょうほう」
	PST_PAGE_MEMO,			// 「トレーナーメモ」
	PST_PAGE_PARAM,			// 「ポケモンのうりょく」
	PST_PAGE_B_SKILL,		// 「たたかうわざ」
	PST_PAGE_CONDITION,		// 「コンディション」
	PST_PAGE_C_SKILL,		// 「コンテストわざ」
	PST_PAGE_RIBBON,		// 「きねんリボン」
	PST_PAGE_RET,			// 「もどる」
	PST_PAGE_MAX
};

enum {
	ST_ICON_POKERUS = 0,	// ポケルス
	ST_ICON_MAHI,			// 麻痺
	ST_ICON_KOORI,			// 氷
	ST_ICON_NEMURI,			// 眠り
	ST_ICON_DOKU,			// 毒
	ST_ICON_YAKEDO,			// 火傷
	ST_ICON_HINSI,			// 瀕死

	ST_ICON_NONE,			// 状態異常なし
};


//============================================================================================
//	グローバル変数
//============================================================================================
#ifndef P_STATUS_H_GLOBAL
GLOBAL const PROC_DATA PokeStatusProcData;	// プロセス定義データ
#endif


//============================================================================================
//	プロトタイプ宣言
//============================================================================================

//--------------------------------------------------------------------------------------------
/**
 * コンテストフラグを取得
 *
 * @param	sv		セーブデータ
 *
 * @return	コンテストフラグ
 */
//--------------------------------------------------------------------------------------------
GLOBAL BOOL PokeStatus_ContestFlagGet( SAVEDATA * sv );

//--------------------------------------------------------------------------------------------
/**
 * ページ作成
 *
 * @param	dat		ステータス画面データ
 * @param	tbl		ページテーブル
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
GLOBAL void PokeStatus_PageSet( PSTATUS_DATA * dat, const u8 * tbl );

//--------------------------------------------------------------------------------------------
/**
 * プレイヤー情報セット
 *
 * @param	dat		ステータス画面データ
 * @param	my		MYSTATUS
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
GLOBAL void PokeStatus_PlayerSet( PSTATUS_DATA * dat, const MYSTATUS * my );

//--------------------------------------------------------------------------------------------
/**
 * 状態異常アイコンのアーカイブインデックスを取得（キャラ）
 *
 * @param	none
 *
 * @return	アーカイブインデックス
 */
//--------------------------------------------------------------------------------------------
GLOBAL u32 BadStatusIconCharArcGet(void);

//--------------------------------------------------------------------------------------------
/**
 * 状態異常アイコンのアーカイブインデックスを取得（パレット）
 *
 * @param	none
 *
 * @return	アーカイブインデックス
 */
//--------------------------------------------------------------------------------------------
GLOBAL u32 BadStatusIconPlttArcGet(void);

//--------------------------------------------------------------------------------------------
/**
 * 状態異常アイコンのアーカイブインデックスを取得（セル）
 *
 * @param	none
 *
 * @return	アーカイブインデックス
 */
//--------------------------------------------------------------------------------------------
GLOBAL u32 BadStatusIconCellArcGet(void);

//--------------------------------------------------------------------------------------------
/**
 * 状態異常アイコンのアーカイブインデックスを取得（セルアニメ）
 *
 * @param	none
 *
 * @return	アーカイブインデックス
 */
//--------------------------------------------------------------------------------------------
GLOBAL u32 BadStatusIconCanmArcGet(void);

//--------------------------------------------------------------------------------------------
/**
 * 状態異常アイコンのアニメ番号を取得
 *
 * @param	pp		ポケモンデータ
 *
 * @return	アニメ番号
 */
//--------------------------------------------------------------------------------------------
GLOBAL u32 BadStatusIconAnmGet( POKEMON_PARAM * pp );


#undef GLOBAL
#endif	/* P_STATUS_H */
